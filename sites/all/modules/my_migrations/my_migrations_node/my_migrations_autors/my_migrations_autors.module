<?php

/**
 * Implements hook_menu().
 */
function my_migrations_autors_menu() {
  $items['api/export/node/autors'] = array(
    'title' => 'Autors export',
    'page callback' => 'my_migrations_autors_rest_api',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Retrieves all the nodes.
 */

function my_migrations_autors_rest_api() {

  // Get all nids of content type 'autor_a'
  if (isset($_GET['import'])) {
    $nids = [];
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'autor_a');

    // This optional filter aims to prevent timeouts
    if (isset($_GET['offset']) && isset($_GET['limit'])) {
      $offset = $_GET['offset'];
      $limit = $_GET['limit'];
      $query->range($offset, $limit);
    }

    // Set the sort order, optionally
    if (isset($_GET['sort']) && $_GET['sort'] == 'desc') {
      $query->propertyOrderBy('nid', 'DESC');
    }

    if (isset($_GET['sort']) && $_GET['sort'] == 'asc') {
      $query->propertyOrderBy('nid', 'ASC');
    }

    $results = $query->execute();
    // Get the nid of each node
    foreach ($results['node'] as $node) {
      array_push($nids, $node->nid);
    }

    // Return data in JSON format
    drupal_json_output($nids);
  }

  // Get all nids of content type 'autor_a' that were updated
  // from the begining of the development of the new site
  if (isset($_GET['update'])) {
    $nids = [];
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'autor_a');
    $query->propertyCondition('changed', strtotime(date('2022-05-01')), '>');

    // This optional filter aims to prevent timeouts
    if (isset($_GET['offset']) && isset($_GET['limit'])) {
      $offset = $_GET['offset'];
      $limit = $_GET['limit'];
      $query->range($offset, $limit);
    }

    // Set the sort order, optionally
    if (isset($_GET['sort']) && $_GET['sort'] == 'desc') {
      $query->propertyOrderBy('nid', 'DESC');
    }

    if (isset($_GET['sort']) && $_GET['sort'] == 'asc') {
      $query->propertyOrderBy('nid', 'ASC');
    }

    $results = $query->execute();
    // Get the nid of each node
    foreach ($results['node'] as $node) {
      array_push($nids, $node->nid);
    }

    // Return data in JSON format
    drupal_json_output($nids);
  }

  // Get full data object
  if (isset($_GET['nid'])) {

    $data = [];
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_autor_presentacio', 'f1', 'f1.entity_id = n.nid');
    $query->leftJoin('field_data_field_autor_foto_vertical', 'f2', 'f2.entity_id = n.nid');
    $query->leftJoin('file_managed', 'f3', 'f3.fid = f2.field_autor_foto_vertical_fid');
    $query->leftJoin('field_data_field_autor_foto_horitzontal', 'f4', 'f4.entity_id = n.nid');
    $query->leftJoin('file_managed', 'f5', 'f5.fid = f4.field_autor_foto_horitzontal_fid');
    $query->leftJoin('field_data_field_autor_foto_quadrada', 'f6', 'f6.entity_id = n.nid');
    $query->leftJoin('file_managed', 'f7', 'f7.fid = f6.field_autor_foto_quadrada_fid');
    $query->leftJoin('xmlsitemap', 'f8', 'f8.id = n.nid');
    $query->leftJoin('field_data_field_autor_twitter', 'f9', 'f9.entity_id = n.nid');
    $query->leftJoin('location_instance', 'f10', 'f10.nid = n.nid');
    $query->leftJoin('location', 'f11', 'f11.lid = f10.lid');
    $query->leftJoin('url_alias', 'f12', 'f12.source = CONCAT(:str, n.nid)', array(':str'=>'node/'));
    $query->leftJoin('metatag', 'f13', 'f13.entity_id = n.nid');

    // Node basic information (same one for all node exports)
    $query->addField('n', 'nid', 'nid');
    $query->addField('n', 'vid', 'vid');
    $query->addField('n', 'title', 'title');
    $query->addField('n', 'uid', 'uid');
    $query->addField('n', 'status', 'status');
    $query->addField('n', 'created', 'created');
    $query->addField('n', 'changed', 'changed');
    $query->addField('n', 'comment', 'comments');
    // Introduction of the author
    $query->addField('f1', 'field_autor_presentacio_value', 'introduction');
    $query->addField('f1', 'field_autor_presentacio_format', 'introduction_format'); // Seems to always have same value, added just in case if it's not necessary we can delete it
    // Vertical image
    $query->addField('f2', 'field_autor_foto_vertical_fid', 'vertical_img_fid');
    $query->addField('f2', 'field_autor_foto_vertical_alt', 'vertical_img_alt');
    $query->addField('f2', 'field_autor_foto_vertical_title', 'vertical_img_title');
    $query->addField('f3', 'filename', 'vertical_img_filename');
    $query->addField('f3', 'filemime', 'vertical_img_filemime');
    $query->addField('f3', 'uri', 'vertical_img_uri');
    // Horizontal image
    $query->addField('f4', 'field_autor_foto_horitzontal_fid', 'horizontal_img_fid');
    $query->addField('f4', 'field_autor_foto_horitzontal_alt', 'horizontal_img_alt');
    $query->addField('f4', 'field_autor_foto_horitzontal_title', 'horizontal_img_title');
    $query->addField('f5', 'filename', 'horizontal_img_filename');
    $query->addField('f5', 'filemime', 'horizontal_img_filemime');
    $query->addField('f5', 'uri', 'horizontal_img_uri');
    // Square image
    $query->addField('f6', 'field_autor_foto_quadrada_fid', 'square_img_fid');
    $query->addField('f6', 'field_autor_foto_quadrada_alt', 'square_img_alt');
    $query->addField('f6', 'field_autor_foto_quadrada_title', 'square_img_title');
    $query->addField('f7', 'filename', 'square_img_filename');
    $query->addField('f7', 'filemime', 'square_img_filemime');
    $query->addField('f7', 'uri', 'square_img_uri');
    // xmlsitemap
    $query->addField('f8', 'status', 'xmlsitemap_included'); // Included just in case, although it seems to be the same value for all authors
    $query->addField('f8', 'priority', 'xmlsitemap_priority'); // Included just in case, although it seems to be the same value for all authors
    // Author's Twitter information
    $query->addField('f9', 'field_autor_twitter_url', 'twitter_url');
    $query->addField('f9', 'field_autor_twitter_title', 'twitter_title');
    $query->addField('f9', 'field_autor_twitter_attributes', 'twitter_attributes'); // Probably not needed
    // Location
    $query->addField('f11', 'lid', 'lid');
    $query->addField('f11', 'name', 'location_name');
    $query->addField('f11', 'street', 'location_street');
    $query->addField('f11', 'postal_code', 'location_pc');
    $query->addField('f11', 'city', 'location_city');
    $query->addField('f11', 'province', 'location_province');
    $query->addField('f11', 'country', 'location_country');
    $query->addField('f11', 'longitude', 'location_longitude');
    $query->addField('f11', 'latitude', 'location_latitude');
    $query->addField('f11', 'additional', 'location_additional');
    // Alias
    $query->addField('f12', 'alias', 'url_alias');
    // Metatags
    $query->addField('f13', 'data', 'metatags');

    $query->condition('n.type', 'autor_a');

    // Filter by node ID
    if (isset($_GET['nid'])) {
      $nid = $_GET['nid'];
      $query->condition('n.nid', $nid);
    }

    $query->orderBy('n.nid', 'DESC');
    $results = $query->execute();

    $nids = [];
    $data = [];
    foreach ($results as $row) {
      $item = [
        // Node basic information (same one for all node exports)
        'nid' => $row->nid,
        'vid' => $row->vid,
        'title' => $row->title,
        'uid' => $row->uid,
        'status' => $row->status,
        'created' => $row->created,
        'changed' => $row->changed,
        'comments' => $row->comments,
        // Introduction of the author
        'introduction' => $row->introduction,
        'introduction_format' => $row->introduction_format,
        // Vertical image
        'vertical_img_fid' => $row->vertical_img_fid,
        'vertical_img_alt' => $row->vertical_img_alt,
        'vertical_img_title' => $row->vertical_img_title,
        'vertical_img_filename' => $row->vertical_img_filename,
        'vertical_img_filemime' => $row->vertical_img_filemime,
        'vertical_img_uri' => $row->vertical_img_uri ? file_create_url($row->vertical_img_uri) : null,
        // Horizontal image
        'horizontal_img_fid' => $row->horizontal_img_fid,
        'horizontal_img_alt' => $row->horizontal_img_alt,
        'horizontal_img_title' => $row->horizontal_img_title,
        'horizontal_img_filename' => $row->horizontal_img_filename,
        'horizontal_img_filemime' => $row->horizontal_img_filemime,
        'horizontal_img_uri' => $row->horizontal_img_uri ? file_create_url($row->horizontal_img_uri) : null,
        // Square image
        'square_img_fid' => $row->square_img_fid,
        'square_img_alt' => $row->square_img_alt,
        'square_img_title' => $row->square_img_title,
        'square_img_filename' => $row->square_img_filename,
        'square_img_filemime' => $row->square_img_filemime,
        'square_img_uri' => $row->square_img_uri ? file_create_url($row->square_img_uri) : null,
        // xmlsitemap
        'xmlsitemap_included' => $row->xmlsitemap_included,
        'xmlsitemap_priority' => $row->xmlsitemap_priority,
        // Author's Twitter information
        'twitter_url' => $row->twitter_url,
        'twitter_title' => $row->twitter_title,
        'twitter_attributes' => $row->twitter_attributes,
        // Location
        'lid' => $row->lid,
        'location_name' => $row->location_name,
        'location_street' => $row->location_street,
        'location_pc' => $row->location_pc,
        'location_city' => $row->location_city,
        'location_province' => $row->location_province,
        'location_country' => $row->location_country,
        'location_longitude' => $row->location_longitude,
        'location_latitude' => $row->location_latitude,
        'location_additional' => $row->location_additional,
        // Alias
        'url_alias' => $row->url_alias,
        // Metatags
        'metatags' => $row->metatags,
      ];
      array_push($nids, $row->nid);
      $data[$row->nid] = (object)$item;
    }
    drupal_json_output(array_values($data));
  }
}
