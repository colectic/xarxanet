<?php

/**
 * Implementation of hook_menu().
 */
function webform_custom_simplenews_menu() {
	$items ['admin/settings/webform_custom_simplenews'] = array(
		'title' => 'Webform Custom Simplenews settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array(
			'webform_custom_simplenews_admin' 
		),
		'access arguments' => array(
			'administer settings' 
		),
		'type' => MENU_NORMAL_ITEM 
	);
	return $items;
}

/**
 * Admin configuration form
 */
function webform_custom_simplenews_admin() {
	$form = array();
	$form ['webform_custom_simplenews_lapse'] = array(
		'#type' => 'textfield',
		'#title' => t('Publish content since'),
		'#description' => t('days before sending moment'),
		'#default_value' => variable_get ('webform_custom_simplenews_lapse', '7'),
		'#size' => 2,
		'#maxlength' => 2,
		'#required' => TRUE 
	);
	
	return system_settings_form ($form);
}

/**
 * Admin configuration form
 */
function webform_custom_simplenews_admin_validate($form, &$form_state) {
	$lapse = $form_state['values']['webform_custom_simplenews_lapse'];
	if (!is_numeric($lapse)) {
		form_set_error ( 'onthisdate_maxdisp', t('You must enter an integer.'));
	} 
	elseif ($lapse <= 0) {
		form_set_error ('onthisdate_maxdisp', t('Maximum number of links must be positive.'));
	}
}

/**
 * Implementation of hook_webform_component_info().
 */
function webform_custom_simplenews_webform_component_info() {
	$components = array();
	$components ['newsletter_param'] = array(
		'label' => t('Newsletter parameters'),
		'description' => t('Parameters for newsletter'),
		'features' => array(
			'csv' => TRUE,
			'email' => TRUE,
			'required' => TRUE,
			'conditional' => TRUE,
			'email_address' => TRUE,
			'spam_analysis' => TRUE 
		),
		'file' => 'webform_custom_simplenews.inc' 
	);
	return $components;
}

/**
 * Implementation of hook_theme()
 */
function webform_custom_simplenews_theme() {
	$path = drupal_get_path ('module', 'webform_custom_simplenews');
	return array(
		'custom_content_section' => array(
			'variables' => array(
				'section_nodes' => null,
				'section_name' => null 
			),
			'template' => 'custom-content-section',
			'path' => $path . '/templates' 
		) 
	);
}

/**
 * Function to register custom content to a subscription
 * 
 * @param $snid subscriptor
 *        	ID
 * @param $tid newsletter
 *        	term ID
 * @param $custom_content array
 *        	of types of the custom content
 */
function register_custom_content($snid, $tid, $field, $custom_content) {
	$serial_content = implode(",", $custom_content);
	$query = "INSERT IGNORE INTO webform_custom_simplenews (snid, tid, custom_content, field) VALUES (" . $snid . ", " . $tid . ", '" . $serial_content . "', '" . $field . "')";
	db_query($query);
}

/**
 * Implements hook_token_info().
 */
function webform_custom_simplenews_token_info() {	
	$types['simplenews-custom-webform'] = array(
		'name' => t('Simplenews Custom Webform'),
		'description' => t ('Tokens related to the newsletter custom content'),
		'needs-data' => ''
	);
	
	$custom['newsletter-custom-content'] = array(
		'name' => t("Custom content"),
		'description' => t("Custom contents for the newsletter."),
	);
	
	return array(
		'types' => $types,
		'tokens' => array(
			'simplenews-custom-webform' => $custom,
		)
	);
}

/**
 * Implementation of hook_tokens().
 * 
 * @see XARXANET-261.
 * @see XARXANET-367.
 */
function webform_custom_simplenews_tokens($type, $tokens, array $data = array(), array $options = array()) {
	
	if ($type == 'simplenews-custom-webform') {
		if ($snid = $data['simplenews_subscriber']->snid) {
			
			// Set variables.
			$field_news = 'field_ambit_noticia';	
			$field_resources = 'field_ambit_recurs';			
			$nodes = array();
			$section_nodes = array();
			$values = array(
				'[simplenews-custom-webform:newsletter-custom-content]' => ''
			);
			
			// Get the taxonomy id of the newsletter being processed.
			$tid = $data['category']->tid;
			
			/** 
			 * Get the taxonomy ids of the categories to which the user is susbcribed.
			 * This is defined in a set of checkboxes on each newsletter's subscription form.
			 */
			$news = db_query("SELECT custom_content FROM {webform_custom_simplenews} WHERE snid = :snid AND tid = :tid", 
				array(
					':snid' => $snid, 
					':tid' => $tid
				)
			)->fetchObject();
			$news_categories = explode(',', $news->custom_content);

			/**
			 * Helper table with the relationship between taxonomy terms
			 * of 'ambit_noticia' and 'ambit_recurs' vocabularies.
			 * 
			 * Etiqueta       Notícia    Recurs
			 * ================================
			 * Ambiental      25373      -----
			 * Comunitari     25374      -----
			 * Cultural       25375      -----
			 * Econòmic       25382      25108
			 * Formació       25381      25107
			 * General        25372      25101
			 * Informàtic     25380      25106
			 * Internacional  25377      -----
			 * Jurídic        25379      25105
			 * Projectes      25378      25100
			 * Social         25376      -----
			 *
			 * As the user only selects 'News' categories in the newsletter's subscription form,
			 * we must map the taxonomy id's of these 'News' categories in order to also get
			 * the 'Resources' for each of them.
			 */
			$resources_categories = array();
			foreach ($news_categories as $news_tid) {
				switch ($news_tid) {
					case '25382':
						$resources_categories[] = '25108';
						break;
					case '25381':
						$resources_categories[] = '25107';
						break;					
					case '25372':
						$resources_categories[] = '25101';
						break;
					case '25380':
						$resources_categories[] = '25106';
						break;
					case '25379':
						$resources_categories[] = '25105';
						break;
					case '25378':
						$resources_categories[] = '25100';
						break;
				}
			}

			/**
			 * The $map array sets the relationship (shown above) 
			 * between same terms id of different vocaluaries.
			 * 
			 * In this case, the keys are the 'ambit_recursos' term id's, 
			 * and the values are the 'ambit_noticies' term id's.
			 */
			$map = array(
				'25108' => '25382',
				'25107' => '25381',
				'25101' => '25372',
				'25106' => '25380',
				'25105' => '25379',
				'25100' => '25378',
			);

			/**
			 * @begin XARXANET-261
			 *
			 * Ensure that the newsletter will get all the articles from the 
			 * first moment of the day defined in "$created", in order to compose
			 * all the automated content of the second half of the newsletter.
			 * 
			 * IMPORTANT: Notice that the following only will work properly if the 
			 * user is in the same timezone of the webserver (in this case, it's true).
			 */
			$lapse = variable_get ('webform_custom_simplenews_lapse', '7');
			$created = time() - $lapse * 86400;
			$created = strtotime(date('d-m-Y 00:00:00', $created));
			
			/**
			 * Get the latest News nodes (within the lapse defined by $created) and store its nid's
			 * in the array $nodes.
			 * 
			 * Notice that they're classified by $news_tid, in order to ease the merge with 
			 * Resources nodes afterwards using the $map array.
			 */
			foreach ($news_categories as $news_tid) {
				if ($news_tid) {
					$nodes['news'][$news_tid] = array();
					// Get a set of nodes id's which are tagged with $news_tid.
					$news_query = "SELECT n.nid FROM field_data_{$field_news} AS f INNER JOIN node as n ON f.entity_id = n.nid WHERE f.{$field_news}_tid = {$news_tid} AND n.created >= {$created} AND n.status = 1 ORDER BY n.created DESC";
					$news_results = db_query($news_query);
					
					while ($news_item = $news_results->fetchObject()) {
						$nodes['news'][$news_tid][] = $news_item->nid;
					}
				}
			}

			/**
			 * Get the latest Resources nodes (within the lapse defined by $created) and store its nid's
			 * in the array $nodes.
			 * 
			 * Notice that they're classified by $resources_tid, in order to ease the merge with 
			 * News nodes afterwards.
			 */
			foreach ($resources_categories as $resources_tid) {
				if ($resources_tid) {
					$nodes['resources'][$resources_tid] = array();
					// Get a set of nodes id's which are tagged with $resources_tid.
					// This query is deliberately sorted by date in ASC order, because the values will be
					// added afterwards to $section_nodes with array_unshift, resulting in a sort order from newest to older (DESC).
					$resources_query = "SELECT n.nid FROM field_data_{$field_resources} AS f INNER JOIN node as n ON f.entity_id = n.nid WHERE f.{$field_resources}_tid = {$resources_tid} AND n.created >= {$created} AND n.status = 1 ORDER BY n.created ASC"; 
					$resources_results = db_query($resources_query);
					
					while ($resource_item = $resources_results->fetchObject()) {
						$nodes['resources'][$resources_tid][] = $resource_item->nid;
					}
				}
			}

			/**
			 * Merge $nodes array, using the $map array to group News & Resources together,
			 * and putting them in $section_nodes array.
			 */

			// Add News to $section_nodes.
			foreach ($nodes['news'] as $news_key => $news_nodes) {
				$section_nodes[$news_key] = $news_nodes;
			}

			// Add Resources to $section_nodes.
			foreach ($nodes['resources'] as $resources_key => $resources_nodes) {
				foreach ($resources_nodes as $resource_key => $resource_node) {
					array_unshift($section_nodes[$map[$resources_key]], $resource_node);
				}
			}

			// Build each section with its regarding nodes and attach the HTML to the token.
			if (!empty($section_nodes)) {
				foreach ($section_nodes as $category_id => $category_nodes) {
					$category_term = taxonomy_term_load($category_id);
					$html = theme('custom_content_section', array('section_nodes' => $category_nodes, 'section_name' => $category_term->name));
					$values['[simplenews-custom-webform:newsletter-custom-content]'] .= $html;
				}
			}
		}
	}
	return $values;
}
