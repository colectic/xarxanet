<?php

/**
 * @file
 * Defines simple link field types.
 */

define('LINK_EXTERNAL', 'external');
define('LINK_INTERNAL', 'internal');
define('LINK_FRONT', 'front');
define('LINK_EMAIL', 'email');
define('LINK_NEWS', 'news');
define('LINK_DOMAINS', 'aero|arpa|asia|biz|com|cat|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|mobi|local');
// There are many other characters which are legal other than simply a-z - this includes them.
// html_entity_decode() is buggy in php 4 - we'll put it back here for D7 when 5.x is assumed.
/*define('LINK_ICHARS', (string) html_entity_decode(implode("", array(
    "&#x00E6;", // æ
    "&#x00C6;", // Æ
    "&#x00F8;", // ø
    "&#x00D8;", // Ø
    "&#x00E5;", // å
    "&#x00C5;", // Å
    "&#x00E4;", // ä
    "&#x00C4;", // Ä
    "&#x00F6;", // ö
    "&#x00D6;", // Ö
    "&#x00FC;", // ü
    "&#x00DC;", // Ü
  )), ENT_QUOTES, 'UTF-8'));*/

define('LINK_TARGET_DEFAULT', 'default');
define('LINK_TARGET_NEW_WINDOW', '_blank');
define('LINK_TARGET_TOP', '_top');
define('LINK_TARGET_USER', 'user');

/**
 * Maximum URLs length.
 */
define('LINK_URL_MAX_LENGTH', 2048);

function equi_links_perm(){
  return array('config equi_links');
}

function equi_links_menu(){
  $items = array();
  
  $items['gestio/wordlinks'] = array(
    'title' => 'Words to links configuration',
    'page callback' => '_equi_links_config_page',
    'access arguments' => array('config equi_links'),
    'type' => MENU_NORMAL_ITEM,

  );
  
  $items['gestio/wordlinks/edita'] = array(
    'title' => 'Edit Link',
    'page callback' => '_equi_links_edita_page',
    'access arguments' => array('config equi_links'),
    'type' => MENU_CALLBACK,

  );
  
  $items['gestio/wordlinks/borra'] = array(
    'title' => 'Confirm Word deletion',
    'page callback' => '_equi_links_borra_page',
    'access arguments' => array('config equi_links'),
    'type' => MENU_CALLBACK,

  );
  
  return $items;
}

function _equi_links_config_page(){

  $output = drupal_get_form('equi_links_config_form');
  $output .= "Llista de les paraules introduides<br />";
  $words = _obtenir_paraules_existents();
  
  foreach($words as $word){
    $output .= $word['word']." - ".$word['link']." - ".l('edita','gestio/wordlinks/edita/'.$word['wid'])." - ".l('esborra','gestio/wordlinks/borra/'.$word['wid'])."<br />";
  }
  return $output;
}

function equi_links_config_form($form_state){
  $form = array();
  
  $form['words'] = array(
    '#type' => 'textarea',
    '#title' => t('Paraula/es',array(),'ca'),
    '#description' => t('Escriu les paraules separades per comes.',array(),'ca'),
    '#rows' => 3,
    '#cols' => 80,
  );
  
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Enllaç',array(),'ca'),
    '#description' => t("Introdueix l'enllaç associat a les paraules introduïdes.",array(),'ca'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Envia',array(),'ca'),
  );
  
  return $form;
} 

function equi_links_config_form_validate($form, &$form_state){
  //krumo($form_state);
  if(_equi_links_validate_url(trim($form_state['values']['link'])) ==  FALSE){
    form_set_error('link',t('El link no es correcte',array(),'ca'));
  }
}

function equi_links_config_form_submit($form, &$form_state){
  $url = $form_state['values']['link'];
  $words = explode(',',$form_state['values']['words']);
  foreach($words as $word){
    db_query("INSERT INTO {word_links} (word,link) VALUES ('%s','%s')",strtolower(trim(strip_tags($word))),$url);
  }
}

function _equi_links_validate_url($text) {
  $LINK_ICHARS_DOMAIN = (string) _equi_link_html_entity_decode(implode("", array(
    "&#x00E6;", // æ
    "&#x00C6;", // Æ
    "&#x00F8;", // ø
    "&#x00D8;", // Ø
    "&#x00E5;", // å
    "&#x00C5;", // Å
    "&#x00E4;", // ä
    "&#x00C4;", // Ä
    "&#x00F6;", // ö
    "&#x00D6;", // Ö
    "&#x00FC;", // ü
    "&#x00DC;", // Ü
    "&#x00D1;", // Ñ
    "&#x00F1;", // ñ
  )), ENT_QUOTES, 'UTF-8');
  
  $LINK_ICHARS = $LINK_ICHARS_DOMAIN . (string) _equi_link_html_entity_decode(implode("", array(
    "&#x00DF;", // ß
  )), ENT_QUOTES, 'UTF-8');
  $allowed_protocols = variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal'));

  $protocol = '(('. implode("|", $allowed_protocols) .'):\/\/)';
  $authentication = '(([a-z0-9%' . $LINK_ICHARS . ']+(:[a-z0-9%'. $LINK_ICHARS . '!]*)?)?@)';
  $domain = '(([a-z0-9' . $LINK_ICHARS_DOMAIN . ']([a-z0-9'. $LINK_ICHARS_DOMAIN . '\-_\[\]])*)(\.(([a-z0-9' . $LINK_ICHARS_DOMAIN . '\-_\[\]])+\.)*('. LINK_DOMAINS .'|[a-z]{2}))?)';
  $ipv4 = '([0-9]{1,3}(\.[0-9]{1,3}){3})';
  $ipv6 = '([0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7})';
  $port = '(:([0-9]{1,5}))';

  // Pattern specific to external links.
  $external_pattern = '/^'. $protocol .'?'. $authentication .'?('. $domain .'|'. $ipv4 .'|'. $ipv6 .' |localhost)'. $port .'?';

  // Pattern specific to internal links.
  $internal_pattern = "/^([a-z0-9". $LINK_ICHARS ."_\-+\[\]]+)";
  $internal_pattern_file = "/^([a-z0-9". $LINK_ICHARS ."_\-+\[\]\.]+)$/i";

  $directories = "(\/[a-z0-9". $LINK_ICHARS ."_\-\.~+%=&,$'!():;*@\[\]]*)*";
  // Yes, four backslashes == a single backslash.
  $query = "(\/?\?([?a-z0-9". $LINK_ICHARS ."+_|\-\.\/\\\\%=&,$'():;*@\[\]{} ]*))";
  $anchor = "(#[a-z0-9". $LINK_ICHARS ."_\-\.~+%=&,$'():;*@\[\]\/\?]*)";

  // The rest of the path for a standard URL.
  $end = $directories .'?'. $query .'?'. $anchor .'?'.'$/i';
  
  $message_id = '[^@].*@'. $domain;
  $newsgroup_name = '([0-9a-z+-]*\.)*[0-9a-z+-]*';
  $news_pattern = '/^news:('. $newsgroup_name .'|'. $message_id .')$/i';

  $user = '[a-zA-Z0-9'. $LINK_ICHARS .'_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\'\[\]]+';
  $email_pattern = '/^mailto:'. $user .'@'.'('. $domain .'|'. $ipv4 .'|'. $ipv6 .'|localhost)'. $query .'?$/';

  if (strpos($text, '<front>') === 0) {
    return LINK_FRONT;
  }
  if (in_array('mailto', $allowed_protocols) && preg_match($email_pattern, $text)) {
    return LINK_EMAIL;
  }
  if (in_array('news', $allowed_protocols) && preg_match($news_pattern, $text)) {
    return LINK_NEWS;
  }
  if (preg_match($internal_pattern . $end, $text)) {
    return LINK_INTERNAL;
  }
  if (preg_match($external_pattern . $end, $text)) {
    return LINK_EXTERNAL;
  }
  if (preg_match($internal_pattern_file, $text)) {
    return LINK_INTERNAL;
  }

  return FALSE;
}

/**
 * Wrapper around html_entity_decode to handle problems with PHP 4.
 *
 * See http://drupal.org/node/739650
 * See http://bugs.php.net/bug.php?id=25670
 *
 * We've taken this away from the beginning of file define() step, as this is
 * going to be slower for PHP4, and we don't want to run this on every page load,
 * just when we're doing a validate.
 */
function _equi_link_html_entity_decode($html_string, $quote_style = ENT_COMPAT, $charset) {
  if (defined('PHP_VERSION')) {
    $version = explode('.', PHP_VERSION);
    if ($version[0] == '5') {
      return html_entity_decode($html_string, $quote_style, $charset); // PHP 5, use default.
    }
  }
  else {
    $version = explode('.', PHP_VERSION);
    if ($version[0] == '5') {
      return html_entity_decode($html_string, $quote_style, $charset);
    }
  }
  // use suggested code from http://drupal.org/node/739650
  // replace numeric entities
  $string = preg_replace('~&#x([0-9a-f]+);~ei', "_link_code2utf(hexdec('\\1'))", $html_string);
  $string = preg_replace('~&#([0-9]+);~e', '_link_code2utf("\\1")', $string);

  // replace literal entities.
  $trans_tbl = get_html_translation_table(HTML_ENTITIES);
  $trans_tbl = array_flip($trans_tbl);

  return strtr($string, $trans_tbl);
}

function _equi_links_edita_page(){
  $wid = arg(3);
  $res = db_fetch_array(db_query("SELECT word,link FROM {word_links} WHERE wid = %d",$wid));
  return drupal_get_form("equi_links_edita_form",$res['word'],$res['link']);
}

function equi_links_edita_form($form_state,$word,$link){
  $form = array();
  
  $form['word'] = array(
    '#type' => 'textfield',
    '#title' => t('Paraula',array(),'ca'),
    '#value' => $word,
    '#disabled' => TRUE,
  );
  
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Enllaç',array(),'ca'),
    '#description' => t("Introdueix l'enllaç associat a les paraules introduïdes.",array(),'ca'),
    '#default_value' => $link,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Envia',array(),'ca'),
  );
  
  
  return $form;
}

function equi_links_edita_form_validate($form,&$form_state){
  if(_equi_links_validate_url(trim($form_state['values']['link'])) ==  FALSE){
    form_set_error('link',t('El link no es correcte',array(),'ca'));
  }
}

function equi_links_edita_form_submit($form,&$form_state){
  $url = $form_state['values']['link'];
  $word = $form_state['values']['word'];

  db_query("UPDATE {word_links} SET link = '%s' WHERE word = '%s'",$url,$word);
  drupal_goto('gestio/wordlinks');
}

function _equi_links_borra_page(){
  $wid = arg(3);
  $res = db_fetch_array(db_query("SELECT word,link FROM {word_links} WHERE wid = %d",$wid));
  $output = t("Estas segur que vols esborrar la paraula !word amb link !link",array('!word' => $res['word'],'!link' => $res['link']),'ca')."<br />";
  $output .= drupal_get_form('equi_links_borra_form',$wid);
  return $output;
}

function equi_links_borra_form($form_state,$wid){
  
  $form = array();
  
  $form['wid'] = array(
    '#type' => 'hidden',
    '#value' => $wid,
  );
  
  $form['ok'] = array(
    '#type' => 'submit',
    '#value' => t('Acceptar',array(),'ca'),
  );
  $form['nook'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel·la',array(),'ca'),
  );
  
  return $form;
}

function equi_links_borra_form_submit($form,$form_state){

  if($form_state['clicked_button']['#value'] == 'Acceptar')
  {
    db_query("DELETE FROM {word_links} WHERE wid = '%s'",$form_state['values']['wid']);
  }
  drupal_goto('gestio/wordlinks');
}

function _obtenir_paraules_existents(){
  $result = db_query("SELECT wid,word,link FROM {word_links}");
  $i=0;
  $words = array();
  while($res = db_fetch_array($result)){
    $words[$i]['word'] = $res['word'];
    $words[$i]['link'] = $res['link'];
    $words[$i]['wid'] = $res['wid'];
    $i++;
  }
  return $words;
}

function _obtenir_paraules_existents_separats(&$words){
  $result = db_query("SELECT word,link FROM {word_links}");
  $i = 0;
  global $paraules_global;
  while($res = db_fetch_array($result)){
    $word = convertLatin1ToHtml($res['word']);
    $words[$i] = "/(\s".$word."[\s]??[,|.|;|:]?\b)|((<p>|<strong>|<em>|<li>|<u>)".$word."[\s]??[,|.|;|:]?\b)/iu";
    $paraules_global[strtolower($word)] = $res['link'];
    $i++;
  }
}

function equi_links_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  switch($op){
    case 'view':
      $words = array();
      $links = array();

      _obtenir_paraules_existents_separats($words);
      global $paraules_global;
      $node->content['body']['#value'] = str_replace('&nbsp;',' ',$node->content['body']['#value']);
      $node->content['body']['#value'] = html_entity_decode(preg_replace_callback($words,"equi_links_get_links_replacement",$node->content['body']['#value']),ENT_NOQUOTES,'UTF-8');
      $node->content['body']['#value'] = preg_replace_callback("/<\/a>;/","equi_links_neteja_puntcoma",$node->content['body']['#value']);
      $node->content['body']['#value'] = equi_links_clear_triforce_symbols($node->content['body']['#value']);
      break;
      
  }
}

function equi_links_form_alter(&$form, &$form_state, $form_id){
  if(isset($form['#node']))
  {
    //Obtenir totes les paraules que s'autoenllacen
    $result = db_query("SELECT word FROM {word_links}");
    $words = array();
    while($res = db_fetch_array($result)){
      $words[]= $res['word'];
    }
    //Crear el missatge
    $message = t("<strong>Les següents paraules s'autoenllaçaran al visualitzar aquest contingut: ",array(),'ca').implode(', ',$words)."</strong> ".t("Si no voleu que una paraula s'autoenllaci, seleccioneu-la i premeu el botó del triangle de l'editor de text per a filtrar-la.",array(),'ca');
    //Recorrer els camps de text i afegir el missatge
    if(!empty($form['#field_info']))
    {
      foreach($form['#field_info'] as $field_name => $field_info)
      {
        if($form[$field_name][0]['#type'] == 'text_textarea')
        {
          $form[$field_name][0]['#description'] .= $message;
        }
      }
    }
    $form['body_field']['body']['#description'] .= $message;
  }
}

function equi_links_get_links_replacement($matches)
{
  global $paraules_global;
  
  if(strpos($matches[0],"<p>")!==false){
    $matches[0] = str_replace("<p>", "", $matches[0]);
    $link = "<p>".l($matches[0],$paraules_global[strtolower($matches[0])]);
    return $link;
   }elseif(strpos($matches[0],"<strong>")!==false){
    $matches[0] = str_replace("<strong>", "", $matches[0]);
    $link = "<strong>".l($matches[0],$paraules_global[strtolower($matches[0])]);
    return $link;
   }elseif(strpos($matches[0],"<em>")!==false){
    $matches[0] = str_replace("<em>", "", $matches[0]);
    $link = "<em>".l($matches[0],$paraules_global[strtolower($matches[0])]);
    return $link;
   }elseif(strpos($matches[0],"<u>")!==false){
    $matches[0] = str_replace("<u>", "", $matches[0]);
    $link = "<u>".l($matches[0],$paraules_global[strtolower($matches[0])]);
    return $link;
   }elseif(strpos($matches[0],"<li>")!==false){
    $matches[0] = str_replace("<li>", "", $matches[0]);
    $link = "<li>".l($matches[0],$paraules_global[strtolower($matches[0])]);
    return $link;
  }else{
    $matches[0] = str_replace(" ", "", $matches[0]);  
    $link = " ".l($matches[0],$paraules_global[strtolower($matches[0])]);
    return $link;
  }
}

function equi_links_neteja_puntcoma($matches){
  print $matches[0];
  return ";</a>";
}

function equi_links_clear_triforce_symbols(&$content){
  return preg_replace('/▲/','',$content);
}

function convertLatin1ToHtml($str) {
    $html_entities = array (
        "&" =>  "&amp[;]?",     #ampersand  
        "á" =>  "&aacute[;]?",     #latin small letter a
        "Â" =>  "&Acirc[;]?",     #latin capital letter A
        "â" =>  "&acirc[;]?",     #latin small letter a
        "Æ" =>  "&AElig[;]?",     #latin capital letter AE
        "æ" =>  "&aelig[;]?",     #latin small letter ae
        "À" =>  "&Agrave[;]?",     #latin capital letter A
        "à" =>  "&agrave[;]?",     #latin small letter a
        "Å" =>  "&Aring[;]?",     #latin capital letter A
        "å" =>  "&aring[;]?",     #latin small letter a
        "Ã" =>  "&Atilde[;]?",     #latin capital letter A
        "ã" =>  "&atilde[;]?",     #latin small letter a
        "Ä" =>  "&Auml[;]?",     #latin capital letter A
        "ä" =>  "&auml[;]?",     #latin small letter a
        "Ç" =>  "&Ccedil[;]?",     #latin capital letter C
        "ç" =>  "&ccedil[;]?",     #latin small letter c
        "É" =>  "&Eacute[;]?",     #latin capital letter E
        "é" =>  "&eacute[;]?",     #latin small letter e
        "Ê" =>  "&Ecirc[;]?",     #latin capital letter E
        "ê" =>  "&ecirc[;]?",     #latin small letter e
        "È" =>  "&Egrave[;]?",     #latin capital letter E
        "ô" =>  "&ocirc[;]?",     #latin small letter u
        "Ò" =>  "&Ograve[;]?",     #latin capital letter U
        "ò" =>  "&ograve[;]?",     #latin small letter u
        "Ó" =>  "&Oacute[;]?",     #latin small letter u
        "ó" =>  "&oacute[;]?",     #latin small letter u
        "î" =>  "&icirc[;]?",     #latin small letter u
        "Ì" =>  "&Igrave[;]?",     #latin capital letter U
        "ì" =>  "&igrave[;]?",     #latin small letter u
        "Í" =>  "&Iacute[;]?",     #latin small letter u
        "í" =>  "&iacute[;]?",     #latin small letter u
        "Ö" =>  "&Ouml[;]?",     #latin capital letter U
        "ö" =>  "&ouml[;]?",     #latin small letter u
        "û" =>  "&ucirc[;]?",     #latin small letter u
        "Ù" =>  "&Ugrave[;]?",     #latin capital letter U
        "ù" =>  "&ugrave[;]?",     #latin small letter u
        "Ú" =>  "&Uacute[;]?",     #latin capital letter U
        "ú" =>  "&uacute[;]?",     #latin small letter u
        "Ü" =>  "&Uuml[;]?",     #latin capital letter U
        "ü" =>  "&uuml[;]?",     #latin small letter u
        "Ý" =>  "&Yacute[;]?",     #latin capital letter Y
        "ý" =>  "&yacute[;]?",     #latin small letter y
        "ÿ" =>  "&yuml[;]?",     #latin small letter y
        "Ÿ" =>  "&Yuml[;]?",     #latin capital letter Y
    );
    foreach ($html_entities as $key => $value) {
        
        $str = str_replace($key, $value, $str);
    }
    return $str;
} 