<?php
// $ID$

function cercador_agenda_menu() {
	
	$items['agenda/cercador'] = array(
		'title' => t('Cercador d\'events'),
		'page callback' => 'cercador_agenda_cercador',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

function cercador_agenda_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
	switch($op){
		case 'view':
			
			if($node->nid==89)//sa de duplicar
			{
				$fieldset = array(
					'#type' => 'fieldset',
					'#title' => t('Cercador'),
					'#collapsible' => TRUE,
					'#collapsed' => TRUE,
					'#value' => drupal_get_form('cercador_agenda_cercador_form'),
				);
				
				$node->content['cercador_agenda']=array(
					"#value"=>theme('fieldset', $fieldset),
					"#weight"=>"-100");
			}				
		break;
	}
}

function cercador_agenda_cercador($resultado=""){
  
  $fieldset = array(
					'#type' => 'fieldset',
					'#title' => t('Cercador'),
					'#collapsible' => TRUE,
					'#collapsed' => FALSE,
					'#value' => drupal_get_form('cercador_agenda_cercador_form'),
				);
  $return = theme('fieldset', $fieldset); 
  
  if (isset($_GET['form_id'])) {
		
		if(cercador_agenda_cercador_form_validate())
		{
			$results = cercador_agenda_cercador_form_submit();
			//print sizeof($results['search']);
			
			$nodes = $results['search'];
		
			if(sizeof($nodes)>0)
			{
				if($results['map']!=""){
						$return.=$results['map'];
						
				}
				if(sizeof($results['coords'])>0){
					$init_coords=$results['coords'];
					//print $init_coords[0]." ".$init_coords[1];
				}
				$return.="<div class='e_news '><ul class='items'>";
				foreach($nodes as $node)
				{
					$return.=theme('search_result_noticies', $node);					
				}
				$return.="</ul></div>";
			}else{
				$return.=t("Cap resultat");
			}
		}
	
  }
  
  return $return;
}



function cercador_agenda_cercador_form(&$form_state){
	$form = array(
    '#action' => base_path()."agenda/cercador",
	'#method' => 'get',
  );
	
	$form['buscar'] = array(
		'#type' => 'textfield',
		'#title' => t('Text a cercar'),
		'#description' => t(utf8_encode("Introdueix aquí el text a cercar")),
		'#default_value'=> $_GET['buscar'],
		'#required' => FALSE,
	);
    
	$form['desde'] = array(
		'#type' => 'textfield',
		'#title' => t(utf8_encode("Introduix aquí el teu punt d'origen")),
		'#description' => t(utf8_encode("Si introdueixes un punt d'origen i una distància, es poden cercar events per proximitat.")),
		'#default_value'=> $_GET['desde'],
		'#required' => FALSE,
	);
  
    $form['distancia'] = array(
		'#title' => t(utf8_encode("Introduiex aquí la distància des del teu punt d'origen")),
		'#type' => 'textfield',
		'#default_value'=> $_GET['distancia'],
		'#description' => t(''),		
		'#required' => FALSE,
	);
  
	$form['tipus'] = array(
		'#title' => t(utf8_encode("Tria quin tipus d'event")),
		'#type' => 'radios',
		'#default_value'=> isset($_GET['tipus'])?$_GET['tipus']:'tots',
		'#options' => array('acte'=>'Acte', 'curs'=>'Curs', 'tots'=>'Tots'),
		'#required' => TRUE,
	);

		$form['init_date'] = array(
		'#title' => t(utf8_encode("Tria a partir de quina data seran els events")),
		'#type' => 'date',
		'#default_value'=> isset($_GET['init_date']['year'])?array('year'=>$_GET['init_date']['year'],'month'=>$_GET['init_date']['month'],"day"=>$_GET['init_date']['day']):'',
		'#required' => TRUE,
		);

	
	$form['mapa'] = array(
		'#title' => t(utf8_encode('Vols mostrar els resultats en un mapa?')),
		'#type' => 'radios',
		'#default_value'=> isset($_GET['mapa'])?$_GET['mapa']:'si',
		'#options' => array('si'=>'Si', 'no'=>'No'),
		'#required' => TRUE,
	);
  
	$form['submit']=array(
		'#type'=>'submit',
		'#value' =>t('Cercar')
		);
	
  return $form;
}



function cercador_agenda_cercador_form_validate(){
	
	$validate=true;
	$distancia = $_GET['distancia'];
	
	$validate = $validate && _validate_number("distancia", $distancia,"La distancia introduïda a de ser un número",false);
	
	$origen = $_GET['desde'];
	/*if($origen != "" && $distancia=="")
	{
			_set_error('distancia', "Si s'introdueix un punt d'origen, s'ha d'introduir una distància (en Km.)");
			$validate = false;
	}*/
	if($origen == "" && $distancia!="")
	{
			_set_error('origen', "Si s'introdueix una distància s'ha d'introduir un punt d'origen");
			$validate = false;
	}
		
	$validate = _validate_text('tipus', $_GET['tipus'], array("tots","acte","curs"), "S'ha d'introduir un tipus vàlid") && $validate;
	$validate = _validate_text('mapa', $_GET['mapa'], array("si","no"), "S'ha d'escollir si vols veure els resutats en un mapa") && $validate;
	
	return $validate;
	
	
}


function cercador_agenda_cercador_form_submit(){ //its custom, not drupal way. 
	
	$array = array();
	$map = "";
	$coords = array();
	
	$date = _formate_date($_GET['init_date']['year'],$_GET['init_date']['month'],$_GET['init_date']['day']);
			
	$mapa = ($_GET['mapa']=='si');
		
	if(isset($_GET['buscar']) and $_GET['buscar']!=""){ //words to searchs its not empty	
		$a_text = preg_split("[ ]", $_GET['buscar']);
			
			/* Select event nodes with date greater equal than the form date 
			of the type specified type (curs, event) witch have the key words (using drupal search index)*/
			$query = "SELECT n.nid, field_map_mapa_marker_lat, field_map_mapa_marker_lng, field_map_mapa_data_id
			FROM {node n, search_index si, content_type_event cte} 
			WHERE n.nid = si.sid
				AND n.nid = cte.nid 
				AND n.status = 1
				AND '"._scape($date)."' <= cte.field_date_event_value
				AND n.type ='event'";

			if($_GET['tipus']!="tots")
			{
				$query.=" AND UPPER(cte.field_event_type_value) = UPPER('"._scape($_GET['tipus'])."')";
			}

			$query.=" AND (si.word ='"._scape(normalize($a_text[0]))."'";
			
			for($i=1;$i<sizeof($a_text);$i++)
			{
				$query.=" OR si.word = '"._scape(normalize($a_text[$i]))."'";
			}
	
			$query.=") GROUP BY n.nid, field_map_mapa_marker_lat, field_map_mapa_marker_lng, field_map_mapa_data_id 
			ORDER BY cte.field_date_event_value ASC";	
		
	} else { //words to search is empty
		
		if($_GET['desde']!="" && $_GET['distancia']=="") //no distance.
		{ 
			/* Select event nodes with date greater equal than the form date of the type specified type (curs, event)*/
			$query = "SELECT n.nid, field_map_mapa_marker_lat, field_map_mapa_marker_lng, field_map_mapa_data_id
				FROM {node n, content_type_event cte, search_index si} 
				WHERE n.nid = cte.nid
					AND n.nid = si.sid
					AND n.type ='event'
					AND n.status = 1
					AND '"._scape($date)."' <= cte.field_date_event_value";
							
						
			
			if($_GET['tipus']!="tots")
			{
				$query.=" AND UPPER(cte.field_event_type_value) = UPPER('"._scape($_GET['tipus'])."')";
			}
			
			$a_text = preg_split("[ ]", $_GET['desde']);
			
			$query.=" AND (si.word ='"._scape(normalize($a_text[0]))."'";
			
			for($i=1;$i<sizeof($a_text);$i++)
			{
				$query.=" OR si.word = '"._scape(normalize($a_text[$i]))."'";
			}
			
			$query.=") GROUP BY n.nid, field_map_mapa_marker_lat, field_map_mapa_marker_lng, field_map_mapa_data_id
			ORDER BY cte.field_date_event_value ASC";
			/* end of node selection*/
		}
		else
		{
			/* Select event nodes with date greater equal than the form date of the type specified type (curs, event)*/
			$query = "SELECT n.nid, field_map_mapa_marker_lat, field_map_mapa_marker_lng, field_map_mapa_data_id
				FROM {node n, content_type_event cte} 
				WHERE n.nid = cte.nid
					AND n.type ='event'
					AND n.status = 1
					AND '"._scape($date)."' <= cte.field_date_event_value";
					
					
			if($_GET['tipus']!="tots")
			{
				$query.=" AND UPPER(cte.field_event_type_value) = UPPER('"._scape($_GET['tipus'])."')";
			}
			$query.=" GROUP BY n.nid, field_map_mapa_marker_lat, field_map_mapa_marker_lng, field_map_mapa_data_id
			ORDER BY cte.field_date_event_value ASC";
			/* end of node selection*/
		}
	}
	$result = db_query($query);
	$init = 0;
	$markers=array();
	if(sizeof($result)>0){ //s'ha de posar algo mes adecuat
		if($_GET['desde']!="") //es pot refinar
		{
			$desde = $_GET['desde'];
			$coords = ekigmaps_get_LatLong($desde);
			$init=1;
			$markers[0]=_make_marker('green', $coords[0], $coords[1], "<strong>".t('Punt d\'orgien')."</strong>");
			//print "<br/>thre is desde";
		}
		//print "<br/>thre is results".sizeof($result);
	}
	$i=$init;
	while ($res = db_fetch_array($result)){
		if($_GET['desde']!="" && $_GET['distancia']!="")
		{
			//print "<br/>coords setted";
			$coords2 = array($res['field_map_mapa_marker_lat'], $res['field_map_mapa_marker_lng']);
			$distance = _calculate_distance($coords, $coords2);
			if($distance<$_GET['distancia'])
			{
				//print "<br/>its is at distance";
				$node = node_load($res['nid']);
				$array[]=$node;
				$markers[$i]=_make_marker('blue', $res['field_map_mapa_marker_lat'],$res['field_map_mapa_marker_lng'],_get_map_text($node));
				$i++;
				
			}
		}	
		else if($_GET['desde']!="" && $_GET['buscar']!=""){
			//print "<br/>thre is desde y buscar";
			$node = node_load($res['nid']);
			
			//print normalize($node->field_ciutat[0]['value']);
			//print normalize($_GET['desde']);
			
			if(normalize($node->field_ciutat[0]['value'])==normalize($_GET['desde']))
			{
				$array[]=$node;
				$markers[$i]=_make_marker('blue', $res['field_map_mapa_marker_lat'],$res['field_map_mapa_marker_lng'],_get_map_text($node));
				$i++;
				//print normalize(strtolower($node->field_ciutat[0]['value']));
			}
		}
		else
		{
			$node = node_load($res['nid']);
			$array[]=$node;
			$markers[$i]=_make_marker('blue', $res['field_map_mapa_marker_lat'],$res['field_map_mapa_marker_lng'],_get_map_text($node));
			$i++;
			
		}
			
	}
	//print "<br/>".sizeof($array)."<br/>";
	
	if($mapa && isset($array) && sizeof($array)>0)
	{
		/*if($_GET['desde']!="")
		{
			$desde = $_GET['desde'];
			$coords = ekigmaps_get_LatLong($desde);
			$init=1;
			$markers[$i]=_make_marker('green', $coords[0], $coords[1], "<strong>".t('Punt d\'orgien')."</strong>");
		}*/
		
		$map = array(
			'id' => 'Mapa',           // id attribute for the map
			'width' => "95%",        // map width in pixels or %
			'height' => "400px",      // map height in pixels
			'behavior' => array(      // Various map behavior flags.
				'autozoom' => true					  
			),
			'markers' => $markers
			);
									
		$map = ekigmaps_create_map($map);	
	}
	return array('search'=>$array, 'map'=>$map, 'query' => $query, 'coords'=>$coords,);
}

function normalize($cadena){
		
	$tofind=array("À", "Á", "Â", "Ã", "Ä", "Å", "à", "á", "â", "ã", "ä", "å", "Ò", "Ó", "Ô", "Õ", "Ö", "Ø", "ò", "ó", "ô", "õ", "ö", "ø", "È", "É", "Ê", "Ë", "è", "é", "ê", "ë", "Ç", "ç", "Ì", "Í", "Î", "Ï", "ì", "í", "î", "ï", "Ù", "Ú", "Û", "Ü", "ù", "ú", "û", "ü", "ÿ", "Ñ", "ñ", " de","l'", " la");
	$replac=array("A", "A", "A", "A", "A", "A", "a", "a", "a", "a", "a", "a", "O", "O", "O", "O", "O", "O", "o", "o", "o", "o", "o", "o", "E", "E", "E", "E", "e", "e", "e", "e", "C", "c", "I", "I", "I", "I", "i", "i", "i", "i", "U", "U", "U", "U", "u", "u", "u", "u", "y", "N", "n", "", "", "");		
	 
	 $cadena = strtolower($cadena);
	 $cadena = utf8_decode($cadena);
	return(str_replace($tofind,$replac,$cadena));
	
}

function cercador_agenda_theme() {
  return array(
    // as in 'theme('verbose_method',...)
    'search_result_noticies' => array(
      // routes to file exampleModule/spanks-box-thing.tpl.php or [YOUR ACTIVE THEME DIRECTORY]/spanky-box-thing.tpl.php
      'template' => 'search-results-agenda',
      // these variables must be called in the theme function, and will appear in the template as $title, $body, $link
      'arguments' => array(
		'node' => null, 
      ),
    ),);
}

function cercador_agenda_perm(){
  return array(t('view cercador agenda'));
}

function _get_map_text($node)
{
	return "<strong>".utf8_encode($node->title)."</strong><br/>"."<a href=\"".base_path().$node->path."\">".$node->field_resum[0]['value']."</a><br/>";
}

function _scape($string)
{
	return htmlentities(mysql_real_escape_string($string));
}

function _make_marker($color, $lat, $lng, $text)
{
	return array('marker'=>$color, 'latitude'=>$lat, 'longitude'=>$lng, 'text'=>$text);
}

function _calculate_distance($coords1, $coords2)
{
	$lat1 = $coords1[0];
	$lat2 = $coords2[0];
	
	$degtorad = 0.01745329;
	$radtodeg = 57.29577951;
	$dlong = ($coords1[1]-$coords2[1]);
	
	$dvalue = (sin($lat1 * $degtorad) * sin($lat2 * $degtorad)) + (cos($lat1 * $degtorad) * cos($lat2 * $degtorad) * cos($dlong * $degtorad));
	$dd = acos($dvalue)*$radtodeg;
	$km = $dd * 111.302;
	
	return $km;
}

function _formate_date($year, $month, $day)
{
	$month_aux = ($month<10)?0:'';
	$day_aux=($day<10)?0:'';
	$date = $year."-".$month_aux.$month."-".$day_aux.$day."T00:00:00";
	return $date;
}

function _validate_number($name,$key,$msg,$mandatory)
{
	if($mandatory && $key==""){
		$valid=false;
	} 
	else if(!$mandatory && $key=="") {
		$valid=true;
	}
	else {
		$valid=true;
		if(preg_match('/[^0-9\s|\n|\t|*|@|&| |#|$|!|%|^|?|?|<|>|;|\'|-|(|)|;|:|\"|=|+|\/]/', $key)) {
			$valid=false;
		}
	}	
	
	if(!$valid)	_set_error($name, $msg);
	return $valid;
}

function _validate_text($name, $key, $values, $msg)
{
	$valid = false;
	
	if($key!="") {
		for($i=0; $i<sizeof($values) && !$valid; $i++)
			if($values[$i]==$key) $valid=true;		
	}
	
	if(!$valid)	_set_error($name, $msg);
	return $valid;
}

function _set_error($name, $msg)
{
	form_set_error("submitted][".$name, t(utf8_encode($msg)));
}




	

