<?php

/**
 * @file
 * Provide actions for simplenews.
 *
 * @ingroup simplenews
 */

/*
 * Implementation of hook_action_info().
 */
function simplenews_action_info() {
  return array(
    'simplenews_save_newsletter_action' => array(
      'type' => 'simplenews',
      'label' => t('Save newsletter to external storage'),
      'configurable' => TRUE,
      'triggers' => array('simplenews_send')
    ),
  	'simplenews_subscribe_otrs_users_action' => array(
  		'type' => 'simplenews',
  		'label' => t('Subscribe OTRS users periodically'),
  		'configurable' => TRUE,
  		'triggers' => array('cron')
  	),
  );
}

/**
 * 
 * @param unknown $object
 * @param unknown $context
 */
function simplenews_save_newsletter_action($node, $context) {
	$months = array('de gener', 'de febrer', 'de marÃ§', 'd\'abril', 'de maig', 'de juny', 'de juliol', 'd\'agost', 'de setembre', 'd\'octubre', 'de novembre', 'de desembre');
	
	//Check newsletter's tid
	if ($node->simplenews->tid == $context['tid']){
		$subscriber = simplenews_subscriber_load_by_mail ();
		$source = new SimplenewsSourceNode($node, $subscriber);
		$body = $source->getBody();
		$html = '<html><head><meta charset="UTF-8"></head><body>'.$body.'</body></html>';
	
		$time = time();
		$year = date('Y', $time);
		$filename = 'newsletter'.$context['tid'].'_'.$node->title.'_'.$time.'.html';
		$filepath = variable_get('file_public_path', conf_path() . '/files');
		$handle = fopen($filepath.'/'.$filename, 'w');
		fwrite($handle, $html);
		fclose($handle);
		
		//Open FTP connection and save file
		$ftp_server = $context['ftp_server'];
		$ftp_user = $context['ftp_user'];
		$ftp_psw = $context['ftp_pass'];
		$conn_id = ftp_connect($ftp_server);
		$login_result = ftp_login($conn_id, $ftp_user, $ftp_psw);
		ftp_chdir($conn_id, "documents");
		if (!@ftp_chdir($conn_id, $year)){
			ftp_mkdir($conn_id, $year);
			ftp_chdir($conn_id, $year);
		}
		ftp_put($conn_id, $filename, $filepath.'/'.$filename, FTP_BINARY);
		ftp_cdup($conn_id);
		ftp_put($conn_id, 'ultim_butlleti.html', $filepath.'/'.$filename, FTP_BINARY);
		unlink($filepath.'/'.$filename);
		
		//Update the XML reference with the new file
		$localfile = $filepath.'/'.rand(100, 200).'_documents.xml';
		ftp_get($conn_id, $localfile, 'documents.xml', FTP_BINARY);
		$xml = simplexml_load_file($localfile);
		$find = false;
		foreach ($xml->children() as $xml_year){
			$value = (int)$xml_year->attributes()->value;
			if($value == $year){
				$find = true;
				break;
			}
		}
		if (!$find){
			$xml_year = $xml->addChild('year');
			$xml_year->addAttribute('value', $year);
		}	
		$xml_newsletter = $xml_year->addChild('newsletter');
		$xml_newsletter->addChild('number', $node->title);
		$xml_newsletter->addChild('file', $filename);
		$xml_newsletter->addChild('date', date('j', $time).' '.$months[date('n', $time)-1].' de '.date('Y', $time));
		$xml->asXML($localfile);
		ftp_put($conn_id, 'documents.xml', $localfile, FTP_BINARY);
		unlink($localfile);
	}
}

/**
 * Implementation of a configurable Drupal action.
 */
function simplenews_save_newsletter_action_form($context) {
  $tree = taxonomy_get_tree(variable_get('simplenews_vid', ''));
  $terms = array();
  foreach ($tree as $newsletter) {
    $terms[$newsletter->tid] = $newsletter->name;
  }
  $form['tid'] = array(
    '#title' => t('Newsletter'),
    '#type' => 'select',
    '#options' => $terms,
    '#default_value' => isset($context['tid']) ? $context['tid'] : key($terms),
    '#description' => t('The newsletter that will be saved .'),
  );
  $form['ftp_server'] = array(
	'#title' => t('FTP server'),
	'#default_value' => isset($context['ftp_server']) ? $context['ftp_server'] : '',
    '#type' => 'textfield',
  );
  $form['ftp_user'] = array(
	'#title' => t('FTP user'),
	'#default_value' => isset($context['ftp_user']) ? $context['ftp_user'] : '',
    '#type' => 'textfield',
  );
  $form['ftp_pass'] = array(
	'#title' => t('FTP password'),
	'#default_value' => isset($context['ftp_pass']) ? $context['ftp_pass'] : '',
    '#type' => 'password',
  );
  return $form;
}

/**
 * Process simplenews_subscribe_user_action form submissions.
 */
function simplenews_save_newsletter_action_submit($form, $form_state) {
  $form_values = $form_state['values'];
  $params = array(
    'tid' => $form_values['tid'],
    'name' => $form['tid']['#options'][$form_values['tid']],
	'ftp_server' => $form_values['ftp_server'],
	'ftp_user' => $form_values['ftp_user'],
	'ftp_pass' => $form_values['ftp_pass'],
  );
  return $params;
}

function simplenews_subscribe_otrs_users_action(&$object, $context = array()) {
	$result = db_query("SELECT MAX(change_time) as 'change_time' FROM otrs.customer_user");
	$record = $result->fetchObject();
	$timestamp = strtotime($record->change_time);
	$var = 'last_otrs_users_revision_'.$context['tid'];
	$time = variable_get($var, 0);
	$date = date('Y-m-d H:i:s', $time);
	
	if ($time < $timestamp) {
		// Subscribe all users since last revision	
		$result = db_query("SELECT email FROM otrs.customer_user WHERE change_time>'{$date}'");
		while ($email = $result->fetchObject()) {
			$email = $email->email;
			$subscription = simplenews_subscribe_user($email, $context['tid'], FALSE, 'action_otrs');
		}
		watchdog('action', 'Users subscribed to newsletter %newsletter.', array('%newsletter' => $context['name'])); 
				
		variable_set($var, $timestamp);
	}
}

function simplenews_subscribe_otrs_users_action_form($context) {
	$tree = taxonomy_get_tree(variable_get('simplenews_vid', ''));
	$terms = array();
	foreach ($tree as $newsletter) {
		$terms[$newsletter->tid] = $newsletter->name;
	}
	$form['tid'] = array(
			'#title' => t('Newsletter'),
			'#type' => 'select',
			'#options' => $terms,
			'#default_value' => isset($context['tid']) ? $context['tid'] : key($terms),
			'#description' => t('OTRS users will be subscribed to.'),
	);
	return $form;	
}

function simplenews_subscribe_otrs_users_action_submit($form, $form_state) {
	$form_values = $form_state['values'];
	
	$params = array(
			'tid' => $form_values['tid'],
			'name' => $form['tid']['#options'][$form_values['tid']],
	);
	return $params;
}

