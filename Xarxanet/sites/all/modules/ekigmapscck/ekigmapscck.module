<?php
// $Id:$

// Copyright 2008 Thierry GUEGAN http://www.arvoriad.com 

/**
 * @file
 * Defines zipcodes fields for CCK.
 * Provide some verifications on the zipcodes
 */

/**
 * Implementation of hook_field_info().
 * Implementation of hook_field_info().
 *
 * Here we indicate that the content module will use its default
 * handling for the view of this field.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 *
 * If your module will provide its own Views tables or arguments,
 * change CONTENT_CALLBACK_DEFAULT to CONTENT_CALLBACK_CUSTOM.
 *
 * IMPORTANT! - field and widget names will be truncated to 32 characters in
 * the database and in internal arrays, like content_fields(). 
 */
function ekigmapscck_field_info() {
  return array(
    'ekimapa' => array('label' => t('EKI Mapa'))
   );
}

/**
 * Implementation of hook_theme().
 */
function ekigmapscck_theme() {
  return array(
    'ekigmapscck_mapa' => array(
      'arguments' => array('element' => NULL),
    ),
    'ekigmapscck_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 *
 * Handle the settings for a field.
 *
 * @param $op
 *   The operation to be performed. Possible values:
 *   - "form": Display the field settings form.
 *   - "validate": Check the field settings form for errors.
 *   - "save": Declare which fields to save back to the database.
 *   - "database columns": Declare the columns that content.module should create
 *     and manage on behalf of the field. If the field module wishes to handle
 *     its own database storage, this should be omitted.
 *   - "filters": Declare the Views filters available for the field.
 *     (this is used in CCK's default Views tables definition)
 *     They always apply to the first column listed in the "database columns"
 *     array.
 * @param $field
 *   The field on which the operation is to be performed.
 * @return
 *   This varies depending on the operation.
 *   - "form": an array of form elements to add to
 *     the settings page.
 *   - "validate": no return value. Use form_set_error().
 *   - "save": an array of names of form elements to
 *     be saved in the database.
 *   - "database columns": an array keyed by column name, with arrays of column
 *     information as values. This column information must include "type", the
 *     MySQL data type of the column, and may also include a "sortable" parameter
 *     to indicate to views.module that the column contains ordered information.
 *     TODO: Details of other information that can be passed to the database layer can
 *     be found in the API for the Schema API.
 *   - "filters": an array of 'filters' definitions as expected by views.module
 *     (see Views Documentation).
 *     When providing several filters, it is recommended to use the 'name'
 *     attribute in order to let the user distinguish between them. If no 'name'
 *     is specified for a filter, the key of the filter will be used instead.  
 */
function ekigmapscck_field_settings($op, $field) {
  switch ($op) {      
    case 'database columns':
    
         $columns = array(
                 'mapa_data_id' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 'mapa_data_width' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 'mapa_data_height' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 
                 'mapa_possition_zoom' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 'mapa_possition_lat' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 'mapa_possition_lng' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 
                 'mapa_marker_text' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 'mapa_marker_lat' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
                 'mapa_marker_lng' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          );
      return $columns;
  }
}


/**
 * Implementation of hook_field().
 *
 * Define the behavior of a field type.
 *
 * @param $op
 *   What kind of action is being performed. Possible values:
 *   - "load": The node is about to be loaded from the database. This hook
 *     should be used to load the field.
 *   - "validate": The user has just finished editing the node and is
 *     trying to preview or submit it. This hook can be used to check or
 *     even modify the node. Errors should be set with form_set_error().
 *   - "presave": The user has just finished editing the node and the node has
 *     passed validation. This hook can be used to modify the node.
 *   - "insert": The node is being created (inserted in the database).
 *   - "update": The node is being updated.
 *   - "delete": The node is being deleted.
 * @param &$node
 *   The node the action is being performed on. This argument is passed by
 *   reference for performance only; do not modify it.
 * @param $field
 *   The field the action is being performed on.
 * @param &$node_field
 *   The contents of the field in this node. Changes to this variable will
 *   be saved back to the node object.
 * @return
 *   This varies depending on the operation.
 *   - The "load" operation should return an object containing extra values
 *     to be merged into the node object.
 *   - The "insert", "update", "delete", "validate", and "presave" operations
 *     have no return value.
 *
 * In most cases, only "validate" operations is relevant ; the rest
 * have default implementations in content_field() that usually suffice.  
 */
function ekigmapscck_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {
    case 'validate': // corresponds to hook phone_widget validate in zipcode-5.x
    
/*    
$i = 0;
foreach($node_field as $delta => $item)
{
  //foreach($item as $aaa)
  //{
  foreach ($item as $k  => $v) {
    echo "\$item[$k] => $v.<br>" ;
}
//    echo $i. " " .$aaa . "<br>";
$i++;
}
//} 
*/

 
      foreach ($node_field as $delta => $item) 
      {
        if ($item['mapa_data_id'] != '') 
        {
          if (!valid_ekigmapcck('height', $item['mapa_data_height'])) 
          {
              form_set_error( $field['field_name'], 
                              t('"%mapa_data_height" is not a valid height',
                              array('%value' => $item['mapa_data_height'])));
          }
          if (!valid_ekigmapcck('width', $item['mapa_data_width'])) 
              form_set_error( $field['field_name'], 
                              t('"%mapa_data_width" is not a valid width',
                              array('%value' => $item['value'])));
                              
          if (!valid_ekigmapcck('id', $item['mapa_data_id'])) 
              form_set_error( $field['field_name'], 
                              t('"%mapa_data_id" is not a valid id',
                              array('%value' => $item['value'])));
          
          /*
          if (!valid_ekigmapcck('coord', $item['mapa_possition_lat']))
              form_set_error( $field['field_name'], 
                              t('"%mapa_possition_lat" is not a valid latitude',
                              array('%value' => $item['mapa_possition_lat'])));
                              
          if (!valid_ekigmapcck('coord', $item['mapa_possition_lng']))
              form_set_error( $field['field_name'], 
                              t('"%mapa_possition_lng" is not a valid longitude',
                              array('%value' => $item['mapa_possition_lng'])));
                              
          if (!valid_ekigmapcck('coord', $item['mapa_marker_lat']))
              form_set_error( $field['field_name'], 
                              t('"%mapa_marker_lat" is not a valid latitude',
                              array('%value' => $item['mapa_marker_lat'])));
                              
          if (!valid_ekigmapcck('coord', $item['mapa_marker_lng']))
              form_set_error( $field['field_name'], 
                              t('"%mapa_marker_lng" is not a valid longitude',
                              array('%value' => $item['mapa_marker_lng'])));
                              */
          
        }
        else
        {
          form_set_error( $field['field_name'], 
                          t('"%mapa_data_id" is not a valid French postal code.<br>Postal codes should only contains 4 or 5 numbers',
                          array('%value' => $item['value'])));
        }
      }
      break;

    case 'presave': // corresponds to hook phone_widget 'process form values' in phone-5.x

      break;
  }
}

/**
 * Implementation of hook_field_view_item().
 *
 */
/*
function zipcode_field_view_item($field, $node_field_item) {
    $zipcode =  check_plain($node_field_item['value']);
    return $zipcode;
}
*/

/**
 *Implementation of hook_field_formatter_info().
 * Implementation of hook_field_formatter_info().
 *
 * The default behavior of formatters is that they will create
 * a theme for a single field value.
 *
 * Setting 'multiple values' to CONTENT_HANDLE_FIELD will create
 * a formatter that will receive all the values of a field so you
 * can, for instance, plot all the values on a map or in a graph.
 *
 * The 'view' operation (handled by the Content module) constructs the
 * $node in a way that you can use drupal_render() to display the
 * formatted output for an individual field.
 *
 * i.e. print drupal_render($node->field_foo);
 *
 * The code now supports both single value formatters, which theme an
 * individual item value as has been done in previous version of CCK,
 * and multiple value formatters, which theme all values for the field
 * in a single theme. The multiple value formatters could be used, for
 * instance, to plot field values on a single map or display them
 * in a graph. Single value formatters are the default, multiple value
 * formatters can be designated as such in formatter_info().
 *
 * The node array will look like:
 *
 *  'Single value' formatter:
 *   $node->content['field_foo'] = array(
 *     '#type' => 'content_field',
 *     '#title' => 'label'
 *     '#field_name' => 'field_name',
 *     '#node' => $node,
 *     'items' =>
 *       0 => array(
 *         '#theme' => $theme,
 *         '#field_name' => 'field_name',
 *         '#type_name' => $node->type,
 *         '#formatter' => $formatter_name,
 *         '#item' => $items[0],
 *       ),
 *       1 => array(
 *         '#theme' => $theme,
 *         '#field_name' => 'field_name',
 *         '#type_name' => $node->type,
 *         '#formatter' => $formatter_name,
 *         '#item' => $items[1],
 *       ),
 *     ),
 *   );
 *  'Multiple value' formatter:
 *   $node->content['field_foo'] = array(
 *     '#type' => 'content_field',
 *     '#title' => 'label'
 *     '#field_name' => 'field_name',
 *     '#node' => $node,
 *     'items' => array(
 *       '#theme' => $theme,
 *       '#field_name' => 'field_name',
 *       '#type_name' => $node->type,
 *       '#formatter' => $formatter_name,
 *       0 => array(
 *         '#item' => $items[0],
 *       ),
 *       1 => array(
 *         '#item' => $items[1],
 *       ),
 *     ),  
 *   );
 */
function ekigmapscck_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'Default',
      'field types' => array('ekimapa'),
      'multiple values' => CONTENT_HANDLE_CORE,		      			
    ),
  );
 }
 
/**
 *Implementation of hook_field_formatter().
 * 
 * Prepare an individual item for viewing in a browser.
 *
 * @param $field
 *   The field the action is being performed on.
 * @param $item
 *   An array, keyed by column, of the data stored for this item in this field.
 * @param $formatter
 *   The name of the formatter being used to display the field.
 * @param $node
 *   The node object, for context. Will be NULL in some cases.
 *   Warning: when displaying field retrieved by Views, $node will not
 *   be a "full-fledged" node object, but an object containg the data returned
 *   by the Views query (at least nid, vid, changed)
 * @return
 *   An HTML string containing the formatted item.
 *
 * In a multiple-value field scenario, this function will be called once per
 * value currently stored in the field. This function is also used as the handler
 * for viewing a field in a views.module tabular listing.
 *
 * It is important that this function at the minimum perform security
 * transformations such as running check_plain() or check_markup().
 */  
 /*
function zipcode_field_formatter($field, $item, $formatter, $node) {
  if (!isset($item['value'])) {
    return '';
  }
  if ($field['text_processing']) {
    $text = check_markup($item['value'], $item['format'], is_null($node) || isset($node->in_preview));
  }
  else {
    $text = check_plain($item['value']);
  }
  return $text;
}
*/

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 *
 * IMPORTANT! - field and widget names will be truncated to 32 characters in
 * the database and in internal arrays, like content_fields().  
 */
function ekigmapscck_widget_info() {
  return array(
    'ekigmapscck_mapa' => array(
      'label' => t('Mapa'),
      'field types' => array('ekimapa'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),            			
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 *
 * Handle the parameters for a widget.
 *
 * @param $op
 *   The operation to be performed. Possible values:
 *   - "form": Display the widget settings form.
 *   - "validate": Check the widget settings form for errors.
 *   - "save": Declare which pieces of information to save back to the database.
 * @param $widget
 *   The widget on which the operation is to be performed.
 * @return
 *   This varies depending on the operation.
 *   - "form": an array of form elements to add to the settings page.
 *   - "validate": no return value. Use form_set_error().
 *   - "save": an array of names of form elements to be saved in the database.  
 */
function ekigmapscck_widget_settings($op, $widget) {

  switch ($op) {
    case 'form':
          
          $form['ocultos'] = array(
            '#type' => 'checkbox',
            '#title' => t('Campos Ocultos?'),
          );
    return $form;
    
    case 'validate':
      break; //do nothing 

    case 'save':

      return array('ocultos');
  }
}


/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field  
 */
function ekigmapscck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return $element;
}

/**
 * Implementation of hook_content_is_empty().
 *
 * NEW REQUIRED HOOK!
 *
 * This function tells the content module whether or not to consider
 * the $item to be empty. This is used by the content module
 * to remove empty, non-required values before saving them.
 */
function ekigmapscck_content_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
 function ekigmapscck_elements() {
  return array(
    'ekigmapscck_mapa' => array(
      '#input' => TRUE,
    //  '#columns' => array('value'), '#delta' => 0,
      '#process' => array('ekigmapscck_mapa_process'),
      '#autocomplete_path' => FALSE,
      ),
  );
}

/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_ekigmapscck_mapa($element) {
  return $element['#children'];
    
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function ekigmapscck_mapa_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];

  
  
  /*
  $element['mapa'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mapa'),
    '#weight' => 3,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  */
  
  $_width = "277px";
  $_heigth = "300px";
  $_lat = 41.386903;
  $_lng = 2.175164;
  $_zoom = 10;
  
  $_marker_lat = 0;
  $_marker_lng = 0;
  
  if(isset($element['#value']['mapa_data_width']))
  {
    if($element['#value']['mapa_data_width'] != "")   if(valid_ekigmapcck('width',$element['#value']['mapa_data_width']))     $_width   = $element['#value']['mapa_data_width'];
    if($element['#value']['mapa_data_height'] != "")  if(valid_ekigmapcck('height',$element['#value']['mapa_data_height']))   $_heigth  = $element['#value']['mapa_data_height'];
    if($element['#value']['mapa_possition_lat'] != "")if(valid_ekigmapcck('coord',$element['#value']['mapa_possition_lat']))  $_lat     = $element['#value']['mapa_possition_lat'];
    if($element['#value']['mapa_possition_lng'] != "")if(valid_ekigmapcck('coord',$element['#value']['mapa_possition_lng']))  $_lng     = $element['#value']['mapa_possition_lng'];
    
    if(isset($element['#value']['mapa_data_width']))
    {
      if($element['#value']['mapa_possition_zoom'] && $element['#value']['mapa_possition_zoom'] != 0)
      {
       $_zoom = $element['#value']['mapa_possition_zoom'];
       $_zoom = $_zoom +0;
       
      }
    }
  
    if($element['#value']['mapa_marker_lat'] != "") if(valid_ekigmapcck('coord',$element['#value']['mapa_marker_lat'])) $_marker_lat     = $element['#value']['mapa_marker_lat'];
    if($element['#value']['mapa_marker_lng'] != "") if(valid_ekigmapcck('coord',$element['#value']['mapa_marker_lng'])) $_marker_lng     = $element['#value']['mapa_marker_lng'];
  
  
  }
  
  
  $mapa = array(
    'id' => "CCK_Mapa",
    'width' =>  "277px",       // map width in pixels or %
    'height' => "300px",      // map height in pixels
    'latitude' => $_lat,  // map center latitude
    'longitude' => $_lng,  // map center longitude
    'zoom' => $_zoom,             // zoom level
    'behavior' => array(      // Various map behavior flags.
      'autozoom' => true
     ),
     'markerCCK' => array(
      array(
        'latitude' => $_marker_lat,
        'longitude' => $_marker_lng,
        ),
      ),

     
     
  );
  
  
   $element['from'] = array(
    '#type' => 'item',
    '#title' => t('Preview'),
    '#value' => ekigmaps_create_cck_map($mapa, $element['#field_name']),
  );  
  
   $element['mapa_buscar_address'] = array(
     '#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Search Address'),
     '#description' => $element['#description'],
     '#required' =>  FALSE,
     '#default_value' => "",
     '#attributes' => array(
                            'onchange' => 'cckSearch(this.value)',
                            ),
   );
   $element['mapa_buscar_address_button'] = array('#type' => 'markup', '#value' => '<input type="button" value="Cerca"/>');
   
  
  
  
  /*
  $element['mapa']['data'] = array(
      '#type' => 'fieldset',
      '#title' => t('Atributos del Mapa'),
      '#weight' => 3,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    */
  
  $element['mapa_data_id'] = array(
    '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
    //'#type' => 'textfield',
   // '#default_value' => ($element['#value']['mapa_data_id'] != "") ? $element['#value']['mapa_data_id'] : "new_map",
    '#default_value' => ($element['#value']['mapa_data_id'] != "") ? $element['#value']['mapa_data_id'] : "ekimap",
    '#title' => t('id del Mapa'),
    '#description' => $element['#description'],
//    '#required' => TRUE,
  );
   $element['mapa_data_width'] = array(
     '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
     //'#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Map size Width'),
     '#description' => t('The map width, as a CSS length or percentage. Examples: 50px, 5em, 2.5in, 95%'),
//     '#required' => TRUE,
     '#default_value' =>  "277px",
   );
   
   $element['mapa_data_height'] = array(
     '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
     //'#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Map size Height'),
     '#description' => t('The map height, as a CSS length or percentage. Examples: 50px, 5em, 2.5in, 95%'),
//     '#required' => TRUE,
     '#default_value' =>  "300px",
   );
    
   /* 
   $element['mapa']['possition'] = array(
      '#type' => 'fieldset',
      '#title' => t('Posicion del Mapa'),
      '#weight' => 3,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    */
   
   $element['mapa_possition_zoom'] = array(
    '#title' => t('The current magnification of the map'),
    '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'select',
    //'#type' => 'select',
    '#options' => drupal_map_assoc(range(0, 17)),
    '#attributes' => array(
                      'onchange' => 'cckMoveMap()',
                      ),
  );
   
      $element['mapa_possition_lat'] = array(
     '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
     //'#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Map possition Lat'),
     '#description' => $element['#description'],
//     '#required' => TRUE,
     '#default_value' => isset($element['#value']['mapa_possition_lat']) ? $element['#value']['mapa_possition_lat'] : 41.386903,
     '#attributes' => array(
                  'onchange' => 'cckMoveMap()',
                  ),
   );
   $element['mapa_possition_lng'] = array(
     '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
     //'#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Map possition Long'),
     '#description' => $element['#description'],
//     '#required' => TRUE,
     '#default_value' => isset($element['#value']['mapa_possition_lng']) ? $element['#value']['mapa_possition_lng'] : 2.175164,
     '#attributes' => array(
                  'onchange' => 'cckMoveMap()',
                  ),
   );
   
   
    
    
   $element['mapa_marker_text'] = array(
     '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
     //'#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Marker Text'),
     '#description' => $element['#description'],
////     '#required' => TRUE,
     '#default_value' => isset($element['#value']['mapa_marker_text']) ? $element['#value']['mapa_marker_text'] : "",
     
    

   );
    
    $element['mapa_marker_lat'] = array(
     '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
     //'#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Marker possition Lat'),
     '#description' => $element['#description'],
////     '#required' => TRUE,
     '#default_value' => isset($element['#value']['mapa_marker_lat']) ? $element['#value']['mapa_marker_lat'] : 41.386903,
          '#attributes' => array(
                  'onchange' => 'cckMoveMarker()',
                  ),

   );
   $element['mapa_marker_lng'] = array(
     '#type' => ($field['widget']['ocultos'] == 1) ? 'hidden' : 'textfield',
     //'#type' => 'textfield',
     '#maxlength' => '255',
     '#title' => t('Marker possition Long'),
     '#description' => $element['#description'],
//     '#required' => TRUE,
     '#default_value' => isset($element['#value']['mapa_marker_lng']) ? $element['#value']['mapa_marker_lng'] : 2.175164,
          '#attributes' => array(
                  'onchange' => 'cckMoveMarker()',
                  ),

   );


   /*
   $element['mapa']['buscar'] = array(
      '#type' => 'fieldset',
      '#title' => t('Buscar una direccion'),
      '#weight' => 3,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    */
    


  
   
  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array('value'))),
  );

  
  return $element;
  
  
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_ekigmapscck_formatter_default($element) {
  
 // return ($element['#item']['mapa_possition_zoom']['value']);
 //_zoom = $element['#item']['mapa_possition_zoom']['value'];

  $zoom =  $element['#item']['mapa_possition_zoom'];
  $zoom = $zoom + 0;
  
//  $zoom = 10;
    $mapa = array(
    'id' => $element['#item']['mapa_data_id'],           // id attribute for the map
    'width' => "277px",        // map width in pixels or %
    'height' => "300px",      // map height in pixels
    
    'latitude' => $element['#item']['mapa_possition_lat'],  // map center latitude
    'longitude' => $element['#item']['mapa_possition_lng'],  // map center longitude
    'zoom' => $zoom,             // zoom level
    'behavior' => array(      // Various map behavior flags.
      'autozoom' => false
     ),  

    
    'markers' => array(
      array(
        'marker' => "blue",
        'latitude' => $element['#item']['mapa_marker_lat'],
        'longitude' => $element['#item']['mapa_marker_lng'],
        'text' => $element['#item']['mapa_marker_text']
      )
    )
  );


 //return $element['#item']['mapa_data_id'] .'<br>' . $zoom .'<br>' . $element['#item']['mapa_possition_lat'] .'<br>' . ekigmaps_create_map($mapa) ;
 return ekigmaps_create_map($mapa) ;

  
 //return $element['#item']['value'] .'<br>' . $element['#item']['width'] .'<br>' . $element['#item']['height'] .'<br>';
  
}


// Hook Menu
function ekigmapscck_menu() {

  $items = array();

  $items['ekigmapscck/cerca'] = array(
    'page callback' => 'ekigmapscck_cerca',
    'access arguments' => array('ekigmapscck cerca'),
    'type' => MENU_CALLBACK,
   );

  return $items;
}

function ekigmapscck_cerca()
{
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => NULL));
}


function valid_ekigmapcck($atribute, $value) 
{
  if($atribute == 'width')  return (preg_match("/^[[:digit:]]+(px|em|\%|in)$/", $value));
  if($atribute == 'height') return (preg_match("/^[[:digit:]]+(px|em|\%|in)$/", $value));
  if($atribute == 'id')     return (($value != "") and count(split(" ",$value))==1);
  if($atribute == 'coord') return (preg_match("/^[[:digit:]]+/", $value));
  
  return true;

}


